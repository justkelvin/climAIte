name: Flutter CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  release:
    types: 
      - created

jobs:
  build:
    name: Build & Release 
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Install Flutter
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
      
      - run: flutter --version

      # Install Flutter dependencies
      - name: Install dependencies
        run: flutter pub get
        
      # Setup Keystore
      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
          
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties
          
      # Run Flutter analyze
      # - name: Analyze code
        # run: flutter analyze

      # Run Flutter tests
      # - name: Run tests
        # run: flutter test

      # Build Flutter app (for Android and iOS)
      - name: Build Android APK
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

        run: flutter build apk --release --dart-define=GEMINI_API_KEY=$GEMINI_API_KEY

      - name: Build APK Bundle
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          
        run: flutter build appbundle --release --dart-define=GEMINI_API_KEY=$GEMINI_API_KEY

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab

      # Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV
          
      # Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      # Modify Tag if it Exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV
  
      # Upload APK to GitHub release
      - name: Upload APK to GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
          # name: "Release for ${{ github.ref }}"
          artifacts: build/app/outputs/flutter-apk/app-release.apk