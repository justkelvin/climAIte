name: Flutter CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  release:
    types: 
      - created

jobs:
  build:
    name: Build & Release 
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Checkout the repository with full history for changelog
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # This gets the full history for changelog
        
      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Install Flutter
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
      
      - run: flutter --version

      # Install Flutter dependencies
      - name: Install dependencies
        run: flutter pub get
        
      # Setup Keystore
      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
          
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties
          
      # Run Flutter analyze
      # - name: Analyze code
        # run: flutter analyze

      # Run Flutter tests
      # - name: Run tests
        # run: flutter test

      # Build Flutter app (for Android and iOS)
      - name: Build Android APK
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

        run: flutter build apk --release --dart-define=GEMINI_API_KEY=$GEMINI_API_KEY

      - name: Build APK Bundle
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          
        run: flutter build appbundle --release --dart-define=GEMINI_API_KEY=$GEMINI_API_KEY

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab

      # Extract Version
      - name: Process Version
        id: version
        run: |
          base_version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "BASE_VERSION=${base_version}" >> $GITHUB_ENV
          
          # Generate new version using date and run number for uniqueness
          build_date=$(date +'%Y%m%d')
          new_version="1.0.${build_date}.${GITHUB_RUN_NUMBER}"
          echo "NEW_VERSION=${new_version}" >> $GITHUB_ENV

      # Generate Changelog
      - name: Generate Changelog
        id: changelog
        run: |
          echo "Generating changelog..."
          echo "# Changelog" > CHANGELOG.md
          echo "## New in version ${{ env.NEW_VERSION }}" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get the last release tag
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$last_tag" ]; then
            # If no previous tag exists, get all commits
            git log --pretty=format:"* %s (%h)" >> CHANGELOG.md
          else
            # Get commits since last tag
            git log ${last_tag}..HEAD --pretty=format:"* %s (%h)" >> CHANGELOG.md
          fi
          
          # Save changelog content for the release
          CHANGELOG_CONTENT=$(cat CHANGELOG.md)
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Upload APK to GitHub Release
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.NEW_VERSION }}
          name: "Release v${{ env.NEW_VERSION }}"
          body: ${{ env.CHANGELOG_CONTENT }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
          makeLatest: true
          replacesArtifacts: true
